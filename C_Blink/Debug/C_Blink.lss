
C_Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000178  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072c  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000644  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000283  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034b  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000151b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <asm_blinking>:

 .global asm_blinking
 .type asm_blinking, @function 

 asm_blinking:
	ldi r16, 0x01
  80:	01 e0       	ldi	r16, 0x01	; 1
	out 0x04, r16
  82:	04 b9       	out	0x04, r16	; 4
	out 0x05, r16
  84:	05 b9       	out	0x05, r16	; 5
	rcall delay
  86:	04 d0       	rcall	.+8      	; 0x90 <delay>
	clr r16
  88:	00 27       	eor	r16, r16
	out 0x05, r16
  8a:	05 b9       	out	0x05, r16	; 5
	rcall delay
  8c:	01 d0       	rcall	.+2      	; 0x90 <delay>
	rjmp asm_blinking
  8e:	f8 cf       	rjmp	.-16     	; 0x80 <asm_blinking>

00000090 <delay>:

delay:					// 1 sek
	ldi  r17, 82
  90:	12 e5       	ldi	r17, 0x52	; 82
    ldi  r18, 43
  92:	2b e2       	ldi	r18, 0x2B	; 43
    ldi  r19, 0
  94:	30 e0       	ldi	r19, 0x00	; 0

00000096 <L1>:
L1: dec  r19
  96:	3a 95       	dec	r19
    brne L1
  98:	f1 f7       	brne	.-4      	; 0x96 <L1>
    dec  r18
  9a:	2a 95       	dec	r18
    brne L1
  9c:	e1 f7       	brne	.-8      	; 0x96 <L1>
    dec  r17
  9e:	1a 95       	dec	r17
    brne L1
  a0:	d1 f7       	brne	.-12     	; 0x96 <L1>
    lpm
  a2:	c8 95       	lpm
	ret
  a4:	08 95       	ret

000000a6 <main>:
	uint8_t i, j;
	
	
	while(1)
    {	
		asm_blinking(0x51, 0x52);	
  a6:	62 e5       	ldi	r22, 0x52	; 82
  a8:	81 e5       	ldi	r24, 0x51	; 81
  aa:	0e 94 40 00 	call	0x80	; 0x80 <asm_blinking>
  ae:	fb cf       	rjmp	.-10     	; 0xa6 <main>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
